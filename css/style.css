/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

NOTES: 
    rotate(180deg)


*/
/* Normalizing using the universal selector, allow us to start clean */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /*using inherit*/
  box-sizing: inherit;
  /* change box model so border, paddings are not added  */ }

html {
  /* by declaring fontSize= 10px we basically saying thta 1 rem = 10 px, so it is easier for us to convert pxs to rem just by div by 10. Converting/using rem instead of pixels is better if you want to be responsive on fontSize, paddings, etc.. If you change the fontSize everything will change it will make life especially with media queries when changing fontSize */
  /* font-size: 10px; */
  /*but using px here is bad practice so instead use % to allow the user to zooming in the page the technique is:
    10px/16px = 0.625 * 100% = 62.5%
    */
  font-size: 62.5%; }

body {
  font-family: "Lato", sans-serif;
  /* all child will inherent the font */
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  box-sizing: border-box; }

.header {
  /* always take 95% of view port height, vh it will change dinamically so it is better to use it */
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  /* clip or cut some part of the image */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* will help to position its child logo-box */
  position: relative; }
  .header__logo-box {
    /* absolute position start counting from the parent's referance in this case is the header */
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* if we define the height the width will automatically be define */
    height: 3.5rem; }
  .header__text-box {
    /* we need to center this so we can use the text-box to centered */
    position: absolute;
    /* in realtion to the parent */
    top: 40%;
    left: 50%;
    /* in realation to the element itself since top & left are 50% starts at the middle but we actually need to start at the middle of the content, will centered vertically & horizonatally  */
    transform: translate(-50%, -50%);
    text-align: center; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* hides the shaky move of the element */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* block elements takes the whole as a block  */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* applying the animation  */
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* there are many function that you can use for animation example:  */
    /* animation-delay: 3s;
        animation-iteration-count: 3;
        animation-timing-function: ease;
        animation-timing-function: ease-out;
        animation-timing-function: ease-in; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

@keyframes moveInLeft {
  /* animation starts @0 */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* animation ends @1000 */
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  /* animation starts @0 */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* animation ends @1000 */
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  /* animation starts @0 */
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  /* animation ends @1000 */
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn {
  /* after acts like a virtual element after we selected */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position: relative; }
  .btn:hover {
    /* moving up -3 goes up  */
    transform: translateY(-0.3rem);
    /* params x direction, down, blur,   */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      /* makes the botton bigger, but we need to animated we always put the animation on the initial state which is btn::after */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* put behind of the button so we can use absolute position but we need the parent to be relative which is the btn:link  */
    position: absolute;
    top: 0;
    left: 0;
    /* it hides the botton */
    z-index: -1;
    /* transitions are use for btn:hover::after  */
    transition: all .4s; }
  .btn .btn--animated {
    /* we can put all values: name, duration effect delate */
    animation: moveInBottom .5s ease-out .75s;
    /* will apply before the animation starts of moveInBottom at 0% */
    animation-fill-mode: backwards; }

/* link is a pseudo class of btn */
